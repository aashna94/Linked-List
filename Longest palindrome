//
//  main.cpp
//  oky
//
//  Created by aashna on 20/06/17.
//  Copyright Â© 2017 q. All rights reserved.
//

#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <string>
#include <climits>
#include <stdio.h>
#include <string.h>
#include <cassert>
#include <algorithm>
#include <stack>
#include <map>
#include <list>
#include <set>
#include <math.h>

using namespace std;

struct node
{
    int data;
    node *next;
   
}*head=NULL;

void insert(int d)
{
    node *p=new node();
    p->data=d;
    if(head==NULL)
        head=p;
    else
    {
        node *temp=head;
        while (temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=p;
    }
    p->next=NULL;
}

void display(node *p)
{
    if(p==NULL)
        return;
    while (p->next!=NULL)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
    cout<<p->data<<" ";
}


int common(node *a, node *b)
{
    int cnt=0;
    for (; a&&b; a=a->next, b=b->next)
    {
        if(a->data==b->data)
            cnt++;
        else
            break;
    }
    return cnt;
}

int longestPalindrome(node *p)
{
    if(p==NULL)
        return 0;
    int cnt=0;
    node *prev=NULL;
    node *curr=p;
    node *nxt=NULL;
    while (curr)
    {
        nxt=curr->next;
        curr->next=prev;
        cnt=max(cnt, 2*common(prev, nxt)+1);
        cnt=max(cnt, 2*common(curr, nxt));
        prev=curr;
        curr=nxt;
    }
    return cnt;
}

int main(int argc, const char * argv[])
{
    int ele,n,i;
    cin>>n;
    for (i=0; i<n ; i++)
    {
        cin>>ele;
        insert(ele);
    }
    cout<<"\nDisplay: ";
    display(head);
    cout<<endl;
    cout<<longestPalindrome(head);
    return 0;
}

