
//
//  main.cpp
//  oky
//
//  Created by aashna on 20/06/17.
//  Copyright Â© 2017 q. All rights reserved.
//

#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <string>
#include <climits>
#include <stdio.h>
#include <string.h>
#include <cassert>
#include <algorithm>
#include <stack>
#include <map>
#include <list>
#include <set>
#include <math.h>

using namespace std;

struct node
{
    int data;
    node *next;
}*a=NULL, *b=NULL;

void insert(node *&head,int d)
{
    node *p=new node();
    p->data=d;
    if(head==NULL)
        head=p;
    else
    {
        node *temp=head;
        while (temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=p;
    }
     p->next=NULL;
}

void display(node *p)
{
    if(p==NULL)
        return;
    while (p->next!=NULL)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
     cout<<p->data<<" ";
}



int recurseLen(node *p)
{
    if(p==NULL)
        return 0;
    return 1+recurseLen(p->next);
}

void reverseLL(node **p)
{
    if(*p==NULL)
        return;
    node *curr=*p;
    node *prev=NULL;
    node *nxt=NULL;
    while (curr!=NULL)
    {
        nxt=curr->next;
        curr->next=prev;
        prev=curr;
        curr=nxt;
    }
    *p=prev;
}


node* sumList(node *p, node *q)
{
    reverseLL(&p);
    reverseLL(&q);
    node *r=new node();
    node *h=r;
    r->data=-1;
    int sum=0,carry=0;
    while (p!=NULL && q!=NULL)
    {
        sum=p->data+q->data+carry;
        if(sum>9)
        {
            carry=1;
            sum%=10;
        }
        else
            carry=0;
        if(r->data==-1)
        {
            r->data=sum;
            r->next=NULL;
        }
        else
        {
            node *temp=new node();
            temp->data=sum;
            r->next=temp;
            r=r->next;
        }
        p=p->next;
        q=q->next;
    }
    if(carry>0)
    {
        node *temp=new node();
        temp->data=carry;
        r->next=temp;
    }
    reverseLL(&h);
    return h;
}

int main(int argc, const char * argv[])
{
    int ele,n1,n2,i;
    cin>>n1;
    for (i=0; i<n1 ; i++)
    {
        cin>>ele;
        insert(a,ele);
    }
    
    cout<<"\nDisplaying A: ";
    display(a);
    
    cin>>n2;
    for (i=0; i<n2 ; i++)
    {
        cin>>ele;
        insert(b,ele);
    }
    
    cout<<"\nDisplaying B: ";
    display(b);
    
    cout<<"\nNew List: ";
    node *r=sumList(a, b);
    display(r);
    return 0;
}
