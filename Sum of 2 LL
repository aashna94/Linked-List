//
//  main.cpp
//  oky
//
//  Created by aashna on 20/06/17.
//  Copyright Â© 2017 q. All rights reserved.
//

#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <string>
#include <climits>
#include <stdio.h>
#include <string.h>
#include <cassert>
#include <algorithm>
#include <stack>
#include <map>
#include <unordered_map>
#include <list>
#include <set>
#include <math.h>
#include <sstream>

using namespace std;

struct node
{
    int data;
    node *next;
};

void insert(node *&head, int d)
{
    node *p=new node();
    p->data=d;
    p->next=NULL;
    if(head==NULL)
    {
        head=p;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=p;
    p->next=NULL;
}

void display(node *p)
{
    if(p==NULL)
        return;
    while (p!=NULL)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
}

int length(node *p)
{
   if(p==NULL)
       return 0;
    return 1+length(p->next);
}

void reverseList(node **p)
{
    if(*p==NULL)
        return;
    node *cur=*p;
    node *prev=new node();
    node *nxt=new node();
    prev=NULL;
    while (cur)
    {
        nxt=cur->next;
        cur->next=prev;
        prev=cur;
        cur=nxt;
    }
    *p=prev;
}

void sumList(node *p, node *q)
{
    reverseList(&p);
    reverseList(&q);
    node *res=new node();
    node *h=new node();
    res->data=-1;
    h=res;
    int carry=0,sum=0;
    while (p!=NULL && q!=NULL)
    {
        sum=carry+p->data+q->data;
        if(sum>9)
        {
            carry=1;
            sum%=10;
        }
        else
            carry=0;
        if(res->data==-1)
        {
            res->data=sum;
            res->next=NULL;
        }
        else
        {
            node *temp=new node();
            temp->data=sum;
            res->next=temp;
            temp->next=NULL;
            res=temp;
        }
        p=p->next;
        q=q->next;
    }
    while (p!=NULL)
    {
        sum=carry+p->data;
        if(sum>9)
        {
            carry=1;
            sum%=10;
        }
        else
            carry=0;
        node *temp=new node();
        temp->data=sum;
        res->next=temp;
        temp->next=NULL;
        res=temp;
        p=p->next;
    }
    
    while (q!=NULL)
    {
        sum=carry+q->data;
        if(sum>9)
        {
            carry=1;
            sum%=10;
        }
        else
            carry=0;
        node *temp=new node();
        temp->data=sum;
        res->next=temp;
        temp->next=NULL;
        res=temp;
        q=q->next;
    }
    
    if(carry>0)
    {
        node *temp=new node();
        temp->data=carry;
        res->next=temp;
        temp->next=NULL;
        res=temp;
    }
    
    reverseList(&h);
    cout<<"\nSum: ";
    display(h);
}



int main(int argc, const char * argv[])
{
    int i,n1,n2,ele;
    cin>>n1;
    node *a=NULL,*b=NULL;
    for (i=0; i<n1 ; i++)
    {
        cin>>ele;
        insert(a,ele);
    }
    cout<<"\nDisplay:";
    display(a);
    
    cin>>n2;
    for (i=0; i<n2 ; i++)
    {
        cin>>ele;
        insert(b,ele);
    }
    cout<<"\nDisplay:";
    display(b);
    
    sumList(a, b);
    return 0;
}

