
//
//  main.cpp
//  oky
//
//  Created by aashna on 20/06/17.
//  Copyright Â© 2017 q. All rights reserved.
//

#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <string>
#include <climits>
#include <stdio.h>
#include <string.h>
#include <cassert>
#include <algorithm>
#include <stack>
#include <map>
#include <list>
#include <set>
#include <math.h>

using namespace std;

struct node
{
    int data;
    node *next;
}*a=NULL, *b=NULL;

void insert(node *&head, int d)
{
    node *p=new node();
    p->data=d;
    if(head==NULL)
        head=p;
    else
    {
        node *temp=head;
        while (temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=p;
    }
     p->next=NULL;
}

void display(node *p)
{
    if(p==NULL)
        return;
    while (p->next!=NULL)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
     cout<<p->data<<" ";
}


int recurseLen(node *p)
{
    if(p==NULL)
        return 0;
    return 1+recurseLen(p->next);
}


bool intersectionLL(node *p, node *q, int diff)
{
    node *x=p;
    node *y=q;
    while (x->next!=NULL)
    {
        x=x->next;
    }
    while (y->next!=NULL)
    {
        y=y->next;
    }
    if(x->data!=y->data)
    {
        cout<<"\nNo Intersection";
        return false;
    }
    int cnt=0;
    while (p!=NULL && cnt<diff)
    {
        cnt++;
        p=p->next;
    }
    while (p!=NULL && q!=NULL)
    {
        if(p->data==q->data)
            break;
        p=p->next;
        q=q->next;
    }
    cout<<"\nIntersection Point: "<<p->data;
    return true;
}

int main(int argc, const char * argv[])
{
    int ele,n1,n2,i;
    cin>>n1;
    for (i=0; i<n1 ; i++)
    {
        cin>>ele;
        insert(a,ele);
    }
    
    cout<<"\nDisplaying A: ";
    display(a);
    
    cin>>n2;
    for (i=0; i<n2 ; i++)
    {
        cin>>ele;
        insert(b,ele);
    }
    
    cout<<"\nDisplaying B: ";
    display(b);
    int diff;
    if(n1>n2)
    {
        diff=n1-n2;
        intersectionLL(a, b, diff);
    }
    else if(n1<n2)
    {
        diff=n2-n1;
        intersectionLL(b, a, diff);
    }
    else
        intersectionLL(b, a, 0);
    
    return 0;
}

