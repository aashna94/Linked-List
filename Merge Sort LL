
//
//  main.cpp
//  oky
//
//  Created by aashna on 20/06/17.
//  Copyright Â© 2017 q. All rights reserved.
//

#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <string>
#include <climits>
#include <stdio.h>
#include <string.h>
#include <cassert>
#include <algorithm>
#include <stack>
#include <map>
#include <list>
#include <set>
#include <math.h>

using namespace std;

struct node
{
    int data;
    node *next;
}*head=NULL;

void insert(int d)
{
    node *p=new node();
    p->data=d;
    if(head==NULL)
        head=p;
    else
    {
        node *temp=head;
        while (temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=p;
    }
     p->next=NULL;
}

void display(node *p)
{
    if(p==NULL)
        return;
    while (p->next!=NULL)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
     cout<<p->data<<" ";
}


int recurseLen(node *p)
{
    if(p==NULL)
        return 0;
    return 1+recurseLen(p->next);
}

void getMiddle(node *p, node **a, node **b)
{
    node *slow=p, *fast=p->next;
    if(p==NULL || p->next==NULL)
    {
        *a=p;
        *b=NULL;
    }
    
    else
    {
        slow=p;
        fast=p->next;
        while (fast!=NULL)
        {
            fast=fast->next;
            if(fast!=NULL)
            {
                slow=slow->next;
                fast=fast->next;
            }
        }
    }
    *a=p;
    *b=slow->next;
    slow->next=NULL;
}

node *merge(node *a, node *b)
{
    node *res=NULL;
    if(a==NULL)
        return b;
    if(b==NULL)
        return a;
   
    if(a->data<=b->data)
    {
        res=a;
        res->next=merge(a->next, b);
    }
    else
    {
        res=b;
        res->next=merge(a, b->next);
    }
    return res;
}

void mergeSort(node **p)
{
    node *temp=*p;
    node *a=NULL, *b=NULL;
    if(temp==NULL || temp->next==NULL)
        return;
    getMiddle(temp, &a, &b);
    mergeSort(&a);
    mergeSort(&b);
    merge(a, b);
}

int main(int argc, const char * argv[])
{
    int ele,n,i;
    cin>>n;
    for (i=0; i<n ; i++)
    {
        cin>>ele;
        insert(ele);
    }
    
    cout<<"\nDisplay: ";
    display(head);
    cout<<"\nSorted List: ";
    mergeSort(&head);
    display(head);
   
    
    return 0;
}
